{"name":"obs-model","tagline":"Extensible observable models.","body":"# Synopsis\r\n\r\n**obs-model** provides a minimal yet very extensible baseline for defining MVC or MVVM models with [observable attributes](https://github.com/pluma/obs).\r\n\r\nFor an example of extending models with plugins, see [the validation plugin](https://github.com/pluma/obs-model-validation).\r\n\r\n[![browser support](https://ci.testling.com/pluma/obs-model.png)](https://ci.testling.com/pluma/obs-model)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/obs-model.png?branch=master)](https://travis-ci.org/pluma/obs-model)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install obs\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/obs-model.git\r\ncd obs-model\r\nnpm install\r\nmake && make dist\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/obs-model\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/obs-model/master/dist/obs-model.min.js) and add it to your project.\r\n\r\nMake sure you also have a compatible copy of [assimilate](https://github.com/pluma/assimilate) and [obs](https://github.com/pluma/obs).\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/obs-model/master/dist/obs-model.amd.min.js) and add it to your project.\r\n\r\nMake sure you also have a compatible copy of [assimilate](https://github.com/pluma/assimilate) and [obs](https://github.com/pluma/obs).\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n# Basic usage example\r\n\r\n```javascript\r\nvar User = model('User')\r\n    .attr('id')\r\n    .attr('username');\r\n\r\nvar bob = new User({id: 1, username: 'bob'});\r\n\r\nbob.username.subscribe(function(value) {\r\n    console.log(\"Bob's username is now: \" + value);\r\n});\r\n\r\nbob.username('admin');\r\n// -> \"Bob's username is now: admin\"\r\n```\r\n\r\n# API\r\n\r\n## model(name)\r\n\r\nCreate a `Model` with the given name.\r\n\r\n## Model.modelName\r\n\r\nThe model's name as passed to `model()`.\r\n\r\n## Model.attr(name, [options])\r\n\r\nDefines a new attribute with the given name. The `options` can be an object containing configuration data for the attribute.\r\n\r\nThe attribute will appear as an observable property on new model instances.\r\n\r\n### options.read and options.write\r\n\r\nIf either of these options is given, a computed observable with its context bound to the model will be created instead of a regular observable property.\r\n\r\n### options.watch\r\n\r\nIf `options.read` is given, `options.watch` may optionally be an array of attribute names the computed observable will monitor for changes.\r\n\r\n### options.lazy\r\n\r\nIf `options.read` is given, `options.lazy` may optionally be a boolean determining whether the computed observable will use lazy evaluation.\r\n\r\n## Model.use(plugin:Function)\r\n\r\nAdds the given plugin to the model. The function will later be called by the model's constructor with `this` set to the new model instance. If you add the same plugin multiple times, it will only be added once.\r\n\r\nThis method is the backbone of model extensibility.\r\n\r\n### plugin.contributeToModel(Model)\r\n\r\nIf this function exists, it will be applied to the `Model` definition when the plugin is added.\r\n\r\nThis function can provide additional properties or behaviour to the `Model` type itself.\r\n\r\n## new Model([values])\r\n\r\nCreates a new model instance. `values` is optionally an object mapping attribute names to their initial values.\r\n\r\n## Model#model\r\n\r\nThe `Model` this model is an instance of.\r\n\r\n## Model#[attrName]\r\n\r\nAn observable property representing each attribute.\r\n\r\n## Model#dismiss()\r\n\r\nRuns the model's destructors. Plugins can use these to free event listeners, subscriptions and such.\r\n\r\n# License\r\n\r\nThe MIT/Expat license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}